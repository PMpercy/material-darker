local colors = require("material-darker.palette")

local hl = vim.api.nvim_set_hl
local theme  = {}

theme.set_highlights = function ()
    -- Editor
    hl(0, "Normal", { fg = colors.fg, bg = colors.bg })  -- editor background and foregroun
    hl(0, "SignColumn", { fg = "NONE", bg = colors.bg })
    hl(0, "MsgArea", { fg = colors.fg, bg = colors.bg })   -- bg and fg of cmd
    hl(0, "ModeMsg", { fg = colors.fg, bg = colors.bg }) -- showmode
    hl(0, "MsgSeparator", { fg = colors.fg, bg = colors.bg })
    hl(0, "SpellBad", { fg = "NONE", bg = "NONE", sp = colors.red, undercurl = true })
	hl(0, "SpellCap", { fg = "NONE", bg = "NONE", sp = colors.yellow, undercurl = true })
	hl(0, "SpellLocal", { fg = "NONE", bg = "NONE", sp = colors.green, underline = true })
	hl(0, "SpellRare", { fg = "NONE", bg = "NONE", sp = colors.purple, underline = true })
    hl(0, "NormalNC", { fg = colors.fg, bg = colors.bg })
    hl(0, "Pmenu", { fg = colors.bg, bg = colors.bg })
    hl(0, "PmenuSel", { fg = colors.cyan, bg = colors.menu_bg })
    hl(0, "WildMenu", { fg = colors.fg, bg = colors.blue })
    hl(0, "CursorLineNr", { fg = colors.alt_fg, bg = "NONE" })
    hl(0, "Folded", { fg = colors.gray, bg = colors.alt_bg })
    hl(0, "FoldColumn", { fg = colors.gray, bg = colors.alt_bg })
    hl(0, "LineNr", { fg = colors.light_gray, bg  = "NONE" })
    hl(0, "FloatBorder", { fg = colors.border, bg = "NONE" })
    hl(0, "Whitespace", { fg = colors.fg, bg = "NONE" })
    hl(0, "VertSplit", { fg = colors.alt_bg, bg = colors.bg })
    hl(0, "VerticalSplit", { fg = colors.alt_bg, bg = colors.bg})
    hl(0, "CursorLine", { fg = "NONE", bg = colors.black })
    hl(0, "CursorColumn", { fg = "NONE", bg = colors.black })
    hl(0, "ColorColumn", { fg = "NONE", bg = colors.black })
    hl(0, "NormalFloat", { fg = "NONE", bg = colors.bg })
    hl(0, "Visual", { fg = "NONE", bg = colors.alt_bg })
    hl(0, "VisualNOS", { fg = "NONE", bg = colors.black})
    hl(0, "WarningMsg", { fg = colors.error, bg = colors.bg })
    hl(0, "DiffText", { fg = colors.alt_bg, bg = colors.sign_delete })
    hl(0, "DiffAdd", { fg = colors.alt_bg, bg = colors.sign_add })
    hl(0, "DiffChange", { fg = colors.alt_bg, bg = colors.sign_change })
    hl(0, "DiffDelete", { fg = colors.alt_bg, bg = colors.sign_delete})
    hl(0, "QuickFixLine", { fg = "NONE", bg = colors.blue })
    hl(0, "PmenuSbar", { fg = "NONE", bg = colors.bg })
    hl(0, "PmenuThumb", { fg = "NONE", bg = colors.gray})
    hl(0, "MatchWord", { fg = "NONE", bg = colors.reference })
    hl(0, "MatchParen", { fg = colors.hint, bg = colors.reference })
    hl(0, "MatchWordCur", { fg = "NONE", bg = colors.reference })
    hl(0, "MatchParenCur", { fg = "NONE", bg = colors.reference })
    hl(0, "Cursor", { fg = colors.cursor_fg, bg = colors.cursor_bg })
    hl(0, "lCursor", { fg = colors.cursor_fg, bg = colors.cursor_bg })
    hl(0, "CursorIM", { fg = colors.cursor_fg, bg = colors.cursor_bg })
    hl(0, "TermCursor", { fg = colors.cursor_fg, bg = colors.cursor_bg })
    hl(0, "TermCursorNC", { fg = colors.cursor_fg, bg = colors.cursor_bg })
    hl(0, "Conceal", { fg = colors.gray, bg = "NONE" })
    hl(0, "Directory", { fg = colors.alt_fg, bg = colors.bg, bold = true })
    hl(0, "SpecialKey", { fg = colors.blue, bg = "NONE", bold = true })
    hl(0, "ErrorMsg", { fg = colors.error, bg = colors.bg, bold = true })
    hl(0, "Search", { fg = "NONE", bg = colors.light_gray })
    hl(0, "IncSearch", { fg = "NONE", bg = colors.light_gray })
    hl(0, "Substitute", { fg = "NONE", bg = colors.light_gray })
    hl(0, "MoreMsg", { fg = colors.yellow, bg = "NONE" })
    hl(0, "Question", { fg = colors.yellow, bg = "NONE" })
    hl(0, "EndOfBuffer", { fg = colors.bg, bg = "NONE" })
    --[[ hl(0, "TabLine", { fg = "yellow", bg = "red" }) ]]
	hl(0, "TabLineSel", { fg = colors.fg, bg = colors.bg })
	hl(0, "TabLineFill", { fg = colors.fg, bg = colors.bg })

    -- Code
    hl(0, "Comment", { fg = colors.comment, bg = "NONE", italic = true })
    hl(0, "Variable", { fg = colors.variable, bg = "NONE"})
    hl(0, "String", { fg = colors.string, bg = "NONE" })
    hl(0, "Character", { fg = colors.character, bg = "NONE"})
    hl(0, "Number", { fg = colors.number, bg = "NONE" })
    hl(0, "Float", { fg = colors.float, bg = "NONE" })
	hl(0, "Boolean", { fg = colors.boolean, bg = "NONE" })
	hl(0, "Constant", { fg = colors.constant, bg = "NONE" })
	hl(0, "Type", { fg = colors.type, bg = "NONE" })
	hl(0, "Function", { fg = colors.functions, bg = "NONE" })
	hl(0, "Keyword", { fg = colors.keyword, bg = "NONE" })
	hl(0, "Conditional", { fg = colors.conditional, bg = "NONE", italic = true })
	hl(0, "Repeat", { fg = colors.repeats, bg = "NONE" })
	hl(0, "Operator", { fg = colors.operator, bg = "NONE" })
	hl(0, "PreProc", { fg = colors.preproc, bg = "NONE" , italic = true })
	hl(0, "Include", { fg = colors.include, bg = "NONE" })
	hl(0, "Exception", { fg = colors.exception, bg = "NONE" })
	hl(0, "StorageClass", { fg = colors.storageclass, bg = "NONE" })
	hl(0, "Structure", { fg = colors.structure, bg = "NONE" })
	hl(0, "Typedef", { fg = colors.typedef, bg = "NONE" })
	hl(0, "Define", { fg = colors.define, bg = "NONE" })
	hl(0, "Macro", { fg = colors.macro, bg = "NONE" })
	hl(0, "Debug", { fg = colors.debug, bg = "NONE" })
	hl(0, "Title", { fg = colors.title, bg = "NONE", bold = true })
	hl(0, "Label", { fg = colors.label, bg = "NONE" })
	hl(0, "SpecialChar", { fg = colors.specialchar, bg = "NONE" })
	hl(0, "Delimiter", { fg = colors.delimiter, bg = "NONE" })
	hl(0, "SpecialComment", { bg = "NONE", link = "Comment" })
	hl(0, "Tag", { fg = colors.tag, bg = "NONE" })
	hl(0, "Bold", { fg = "NONE", bg = "NONE", bold = true })
	hl(0, "Italic", { fg = "NONE", bg = "NONE", italic = true })
	hl(0, "Underlined", { fg = "NONE", bg = "NONE", underline = true })
	hl(0, "Ignore", { fg = colors.magenta, bg = "NONE", bold = true })
	hl(0, "Todo", { fg = colors.magenta, bg = "NONE", bold = true })
	hl(0, "Error", { fg = colors.error, bg = "NONE", bold = true })
	hl(0, "Statement", { fg = colors.purple, bg = "NONE" })
	hl(0, "Identifier", { fg = colors.fg, bg = "NONE" })
	hl(0, "PreCondit", { fg = colors.purple, bg = "NONE" })
	hl(0, "Special", { fg = colors.blue, bg = "NONE" })

	-- Treesitter
	hl(0, "TSComment", { fg = colors.comment, bg = "NONE", italic = true })
	hl(0, "TSVariable", { link = "Variable" })
	hl(0, "TSString", { fg = colors.string })
	hl(0, "TSStringRegex", { fg = colors.cyan })
	hl(0, "TSStringEscape", { link = "String" })
	hl(0, "TSCharacter", { link = "String" })
	hl(0, "TSCharacterSpecial", { link = "SpecialChar" })
	hl(0, "TSNumber", { fg = colors.number })
	hl(0, "TSFloat", { link = "Float" })
	hl(0, "TSBoolean", { fg = colors.yellow})
	hl(0, "TSConstant", { link = "Constant" })
	hl(0, "TSConstBuiltin", { link = "Constant" })
	hl(0, "TSConstructor", { fg = colors.blue })
	hl(0, "TSType", { link = "Type" })
	hl(0, "TSInclude", { link = "Include" })
	hl(0, "TSException", { link = "Exception" })
	hl(0, "TSKeyword", { link = "Keyword" })
	hl(0, "TSKeywordReturn", { fg = colors.cyan, italic = true })
	hl(0, "TSKeywordOperator", { fg = colors.cyan })
	hl(0, "TSKeywordFunction", { fg = colors.magenta, italic = true })
	hl(0, "TSFunction", { fg = colors.functions })
	hl(0, "TSFuncBuiltin", { fg = colors.blue })
	hl(0, "TSMethod", { fg = colors.blue })
	hl(0, "TSFuncMacro", { fg = colors.blue })
	hl(0, "TSConditional", { fg = colors.cyan, italic = true })
	hl(0, "TSRepeat", { fg = colors.cyan, italic = true })
	hl(0, "TSOperator", { fg = colors.cyan })
	hl(0, "TSPreProc", { fg = colors.preproc })
	hl(0, "TSStorageClass", { fg = colors.yellow })
	hl(0, "TSStructure", { fg = colors.structure })
	hl(0, "TSTypeDefinition", { link = "Typedef" })
	hl(0, "TSDefine", { fg = colors.define })
	hl(0, "TSNote", { link = "Comment" })
	hl(0, "TSTodo", { link = "Todo" })
	hl(0, "TSDebug", { link = "Debug" })
	hl(0, "TSDanger", { link = "Error" })
	hl(0, "TSTitle", { link = "Title" })
	hl(0, "TSLabel", { link = "Label" })
	hl(0, "TSPunctDelimiter", { link = "Delimiter" })
	hl(0, "TSTagDelimiter", { fg = colors.cyan, bg = "NONE" })
	hl(0, "TSPunctBracket", { fg = colors.bracket })
	hl(0, "TSPunctSpecial", { link = "Delimiter" })
	hl(0, "TSTag", { fg = colors.tag })
	hl(0, "TSStrong", { link = "Bold" })
	hl(0, "TSEmphasis", { link = "Italic" })
	hl(0, "TSUnderline", { link = "Underline" })
	hl(0, "TSStrike", { fg = "NONE", bg = "NONE", strikethrough = true })
	hl(0, "TSStringSpecial", { fg = colors.string, bg = "NONE" })
	hl(0, "TSEnvironmentName", { fg = colors.cyan, bg = "NONE" })
	hl(0, "TSVariableBuiltin", { link = "Identifier", bg = "NONE" })
	hl(0, "TSConstMacro", { fg = colors.cyan, bg = "NONE" })
	hl(0, "TSTypeBuiltin", { fg = colors.red, bg = "NONE" })
	hl(0, "TSAnnotation", { fg = colors.blue, bg = "NONE" })
	hl(0, "TSNamespace", { fg = colors.yellow, bg = "NONE" })
	hl(0, "TSSymbol", { fg = colors.green, bg = "NONE" })
	hl(0, "TSField", { link = "Varable" })
	hl(0, "TSProperty", { fg = colors.fg, bg = "NONE" })
	hl(0, "TSParameter", { fg = colors.fg, bg = "NONE" })
	hl(0, "TSParameterReference", { fg = colors.fg, bg = "NONE" })
	hl(0, "TSAttribute", { fg = colors.yellow, bg = "NONE" })
	hl(0, "TSText", { fg = colors.fg, bg = "NONE" })
	hl(0, "TSTagAttribute", { fg = colors.magenta, bg = "NONE", italic = true })
	hl(0, "TSError", { fg = colors.error, bg = "NONE" })
	hl(0, "TSWarning", { fg = colors.warning, bg = "NONE" })
	hl(0, "TSQueryLinterError", { fg = colors.error, bg = "NONE" })
	hl(0, "TSURI", { fg = colors.cyan, bg = "NONE", underline = true })
	hl(0, "TSMath", { fg = colors.blue, bg = "NONE" })
	hl(0, "TSLiteral", { fg = colors.fg, bg = "NONE" })

    -- Language
	hl(0, "xmlTag", { fg = colors.character, bg = "NONE" })
	hl(0, "xmlTagName", { fg = colors.character, bg = "NONE" })
	hl(0, "xmlEndTag", { fg = colors.character, bg = "NONE" })
	hl(0, "yamlPlainScalar", { fg = colors.green, bg = "NONE" })
	hl(0, "yamlTSField", { fg = colors.cyan, bg = "NONE" })
	hl(0, "luaFunc", { fg = colors.yellow, bg = "NONE" })
	hl(0, "luaFunction", { fg = colors.blue, bg = "NONE" })
	hl(0, "hclTSPunctSpecial", { fg = colors.comment, bg = "NONE" })
	hl(0, "htmlH1", { fg = colors.yellow, bg = "NONE" })
	hl(0, "htmlH2", { fg = colors.yellow, bg = "NONE" })
	hl(0, "htmlH3", { fg = colors.yellow, bg = "NONE" })
	hl(0, "htmlH4", { fg = colors.yellow, bg = "NONE" })
	hl(0, "htmlH5", { fg = colors.yellow, bg = "NONE" })
	hl(0, "htmlH6", { fg = colors.yellow, bg = "NONE" })
	hl(0, "htmlHead", { fg = colors.yellow, bg = "NONE" })
	hl(0, "htmlTitle", { fg = colors.yellow, bg = "NONE" })
	hl(0, "htmlArg", { fg = colors.magenta, bg = "NONE" })
	hl(0, "htmlTag", { fg = colors.cyan, bg = "NONE" })
	hl(0, "htmlTagN", { fg = colors.tag, bg = "NONE" })
	hl(0, "htmlTagName", { fg = colors.tag, bg = "NONE" })
	hl(0, "htmlComment", { fg = colors.green, bg = "NONE" })
	hl(0, "htmlLink", { fg = colors.green, bg = "NONE", underline = true })
	hl(0, "cssBraces", { fg = "red", bg = "NONE" })
	--[[ hl(0, "cssInclude", { fg = c.purple, bg = "NONE" }) ]]
	--[[ hl(0, "cssTagName", { fg = c.yellow, bg = "NONE" }) ]]
	--[[ hl(0, "cssClassName", { fg = c.yellow, bg = "NONE" }) ]]
	--[[ hl(0, "cssPseudoClass", { fg = c.yellow, bg = "NONE" }) ]]
	--[[ hl(0, "cssPseudoClassId", { fg = c.yellow, bg = "NONE" }) ]]
	--[[ hl(0, "cssPseudoClassLang", { fg = c.yellow, bg = "NONE" }) ]]
	--[[ hl(0, "cssIdentifier", { fg = c.yellow, bg = "NONE" }) ]]
	--[[ hl(0, "cssProp", { fg = c.fg, bg = "NONE" }) ]]
	--[[ hl(0, "cssDefinition", { fg = c.fg, bg = "NONE" }) ]]
	--[[ hl(0, "cssAttr", { fg = c.orange, bg = "NONE" }) ]]
	--[[ hl(0, "cssAttrRegion", { fg = c.orange, bg = "NONE" }) ]]
	--[[ hl(0, "cssColor", { fg = c.orange, bg = "NONE" }) ]]
	--[[ hl(0, "cssFunction", { fg = c.purple, bg = "NONE" }) ]]
	--[[ hl(0, "cssFunctionName", { fg = c.yellow, bg = "NONE" }) ]]
	--[[ hl(0, "cssVendor", { fg = c.orange, bg = "NONE" }) ]]
	--[[ hl(0, "cssValueNumber", { fg = c.orange, bg = "NONE" }) ]]
	--[[ hl(0, "cssValueLength", { fg = c.orange, bg = "NONE" }) ]]
	--[[ hl(0, "cssUnitDecorators", { fg = c.orange, bg = "NONE" }) ]]
	--[[ hl(0, "cssStyle", { fg = c.fg, bg = "NONE" }) ]]
	--[[ hl(0, "cssImportant", { fg = c.blue, bg = "NONE" }) ]]
	--[[ hl(0, "jsonKeyword", { fg = c.blue, bg = "NONE" }) ]]
	--[[ hl(0, "yamlBlockMappingKey", { fg = c.blue, bg = "NONE" }) ]]
	--[[ hl(0, "tomlTSProperty", { fg = c.blue, bg = "NONE" })- ]]

end

return theme
